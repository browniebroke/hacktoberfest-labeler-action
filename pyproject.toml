[build-system]
build-backend = "poetry.core.masonry.api"
requires = [ "poetry-core>=1" ]

[tool.poetry]
name = "hacktoberfest-labeler-action"
version = "2.3.0"
description = "A Github Action to automate Hacktoberfest"
authors = [ "Bruno Alla <alla.brunoo@gmail.com>" ]
license = "MIT"
readme = "README.md"
keywords = [ "github", "actions", "hacktoberfest" ]
repository = "https://github.com/browniebroke/hacktoberfest-labeler-action"
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Natural Language :: English",
  "Operating System :: OS Independent",
  "Topic :: Software Development",
]
packages = [
  { include = "app.py", from = "src" },
]

[tool.poetry.dependencies]
python = "^3.9"
environs = "^11.0.0"
PyGithub = "^2.0.0"

[tool.poetry.group.dev.dependencies]

[tool.ruff]
target-version = "py39"
line-length = 88

lint.select = [
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "D",   # flake8-docstrings
  "E",   # pycodestyle
  "F",   # pyflake
  "I",   # isort
  "RUF", # ruff specific
  "S",   # flake8-bandit
  "UP",  # pyupgrade
  "W",   # pycodestyle
]
lint.ignore = [
  "D100", # Missing docstring in public module
  "D104", # Missing docstring in public package
  "D107", # Missing docstring in `__init__`
  "D203", # 1 blank line required before class docstring
  "D212", # Multi-line docstring summary should start at the first line
  "D401", # First line of docstring should be in imperative mood
]
lint.per-file-ignores."tests/**/*" = [
  "D100",
  "D101",
  "D102",
  "D103",
  "D104",
  "S101",
]
lint.isort.known-first-party = [ "tests", "src" ]

[tool.pytest.ini_options]
addopts = "-v -Wdefault --cov=src"

[tool.semantic_release]
version_toml = [ "pyproject.toml:tool.poetry.version" ]
version_variables = [
  "src/__init__.py:__version__",
]
build_command = "pip install poetry && poetry build"
upload_to_pypi = false
upload_to_release = false

[tool.semantic_release.changelog]
exclude_commit_patterns = [
  "chore.*",
  "ci.*",
  "Merge pull request .*",
]

[tool.semantic_release.changelog.environment]
keep_trailing_newline = true

[tool.semantic_release.branches.main]
match = "main"

[tool.semantic_release.branches.noop]
match = "(?!main$)"
prerelease = true
